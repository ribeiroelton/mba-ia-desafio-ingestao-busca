#!/bin/bash

# Script de valida√ß√£o completa do sistema

set -e

echo "üß™ Valida√ß√£o Completa - Sistema RAG"
echo "===================================="
echo ""

# Cores para output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# 1. Limpar ambiente
echo "1Ô∏è‚É£ Limpando ambiente de testes..."
rm -rf .pytest_cache htmlcov .coverage
echo -e "${GREEN}‚úÖ Ambiente limpo${NC}"
echo ""

# 2. Validar depend√™ncias
echo "2Ô∏è‚É£ Validando depend√™ncias..."
python -c "
import sys
import importlib.metadata

required = [
    ('langchain', '0.3.27'),
    ('langchain-openai', '0.3.1'),
    ('langchain-postgres', '0.0.17'),
    ('psycopg', '3.2.11'),
    ('typer', '0.20.0'),
    ('pypdf', '5.1.0'),
    ('python-dotenv', '1.0.1'),
    ('pytest', '8.3.4'),
    ('pytest-cov', '6.0.0'),
]

print('Verificando pacotes...')
missing = []
for package, expected_version in required:
    try:
        version = importlib.metadata.version(package)
        print(f'‚úÖ {package}=={version}')
    except importlib.metadata.PackageNotFoundError:
        print(f'‚ùå {package} n√£o encontrado')
        missing.append(package)

if missing:
    print(f'\n‚ùå Pacotes faltando: {missing}')
    sys.exit(1)

print('\n‚úÖ Todas as depend√™ncias OK')
"
echo ""

# 3. Validar ambiente
echo "3Ô∏è‚É£ Validando vari√°veis de ambiente..."
python -c "
import os
from dotenv import load_dotenv

load_dotenv()

required_vars = [
    'DATABASE_URL',
    'OPENAI_API_KEY',
]

missing = []
for var in required_vars:
    value = os.getenv(var)
    if not value:
        missing.append(var)
    elif 'your-' in value or 'sk-proj-your-' in value:
        print(f'‚ö†Ô∏è  {var} parece n√£o estar configurada (valor de exemplo)')
        missing.append(var)

if missing:
    print(f'‚ùå Vari√°veis faltando ou n√£o configuradas: {missing}')
    exit(1)

print('‚úÖ Todas as vari√°veis configuradas')
"
echo ""

# 4. Executar testes unit√°rios
echo "4Ô∏è‚É£ Executando testes unit√°rios..."
pytest tests/test_*.py -v --tb=short || {
    echo -e "${RED}‚ùå Testes unit√°rios falharam${NC}"
    exit 1
}
echo -e "${GREEN}‚úÖ Testes unit√°rios OK${NC}"
echo ""

# 5. Executar testes de integra√ß√£o
echo "5Ô∏è‚É£ Executando testes de integra√ß√£o..."
pytest tests/integration/ -v --tb=short || {
    echo -e "${RED}‚ùå Testes de integra√ß√£o falharam${NC}"
    exit 1
}
echo -e "${GREEN}‚úÖ Testes de integra√ß√£o OK${NC}"
echo ""

# 6. Gerar relat√≥rio de cobertura
echo "6Ô∏è‚É£ Gerando relat√≥rio de cobertura..."
pytest --cov=src --cov-report=term --cov-report=html --cov-fail-under=80 || {
    echo -e "${RED}‚ùå Cobertura abaixo de 80%${NC}"
    exit 1
}
echo -e "${GREEN}‚úÖ Cobertura >= 80%${NC}"
echo ""

# 7. Validar cen√°rios cr√≠ticos
echo "7Ô∏è‚É£ Validando cen√°rios cr√≠ticos..."

# CT-001: Pergunta com contexto
echo "   Testing CT-001..."
pytest tests/integration/test_e2e.py::test_e2e_flow_with_context -v || {
    echo -e "${RED}‚ùå CT-001 falhou${NC}"
    exit 1
}

# CT-002: Pergunta sem contexto
echo "   Testing CT-002..."
pytest tests/integration/test_e2e.py::test_e2e_flow_without_context -v || {
    echo -e "${RED}‚ùå CT-002 falhou${NC}"
    exit 1
}

# CT-003: Informa√ß√£o parcial
echo "   Testing CT-003..."
pytest tests/integration/test_e2e.py::test_e2e_partial_information -v || {
    echo -e "${RED}‚ùå CT-003 falhou${NC}"
    exit 1
}

echo -e "${GREEN}‚úÖ Todos os cen√°rios cr√≠ticos OK${NC}"
echo ""

# 8. Resumo final
echo "===================================="
echo -e "${GREEN}‚úÖ VALIDA√á√ÉO COMPLETA APROVADA${NC}"
echo "===================================="
echo ""
echo "üìä Relat√≥rios gerados:"
echo "   - Terminal: Acima"
echo "   - HTML: htmlcov/index.html"
echo ""
echo "üéØ Pr√≥ximos passos:"
echo "   1. Revisar relat√≥rio HTML de cobertura"
echo "   2. Identificar √°reas n√£o cobertas"
echo "   3. Adicionar testes se necess√°rio"
echo "   4. Executar valida√ß√£o manual (chat interativo)"
echo ""
